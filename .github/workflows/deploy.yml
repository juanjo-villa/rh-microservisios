name: Deploy

on:
  push:
    branches: [main]

jobs:
  Deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Build Backend Services
        run: |
          cd backend/employee-service && ./mvnw clean package -DskipTests
          cd ../payroll-service && ./mvnw clean package -DskipTests
          cd ../performance-service && ./mvnw clean package -DskipTests
          cd ../schedule-service && ./mvnw clean package -DskipTests

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Build Frontend
        run: |
          cd frontend/interface
          npm install
          npm run build

      - name: SSH Deploy
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOST_NAME: ${{ secrets.SSH_HOST }}
          USER_NAME: ${{ secrets.USER_NAME }}
          PROJECT_PATH: ${{ secrets.PROJECT_PATH }}
          GIT_REPO: ${{ secrets.GIT_REPO }}
        run: |
          # Create .ssh directory
          mkdir -p ~/.ssh
          
          # Write key to file and set proper permissions
          echo "$PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # Add host to known hosts
          ssh-keyscan -H ${HOST_NAME} >> ~/.ssh/known_hosts
          
          # Test SSH connection
          if ! ssh -T -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key ${USER_NAME}@${HOST_NAME} "echo 'SSH connection successful'"; then
            echo "Error: No se pudo establecer la conexión SSH"
            exit 1
          fi
          
          # Deploy using SSH
          ssh -T -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key ${USER_NAME}@${HOST_NAME} << 'EOF'
            set -e  # Exit on any error
            
            if [ ! -d "${PROJECT_PATH}/.git" ]; then
              echo "Clonando repositorio..."
              mkdir -p $(dirname ${PROJECT_PATH})
              git clone ${GIT_REPO} ${PROJECT_PATH}
            fi

            echo "Actualizando código..."
            cd ${PROJECT_PATH}
            git checkout main
            git fetch --all
            git reset --hard origin/main
            git pull origin main

            echo "Reiniciando servicios..."
            docker-compose down
            docker-compose up -d --build

            echo "Despliegue completado exitosamente"
            EOF